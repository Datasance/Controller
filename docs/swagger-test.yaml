openapi: 3.0.0
info:
  title: Datasance PoT Controller
  version: 3.5.0
  description: Datasance PoT Controller REST API Documentation
servers:
  - url: http://localhost:51121/api/v3
tags:
  - name: Controller
    description: Manage your controller
  - name: ioFog
    description: Manage your agents
  - name: Application
    description: Manage your applications
  - name: Application Template
    description: Manage your application templates
  - name: Catalog
    description: Manage your catalog
  - name: Registries
    description: Manage your registries
  - name: Microservices
    description: Manage your microservices
  - name: Routing
    description: Manage your routes
  - name: Router
    description: Manage your Default Router
  - name: Edge Resource
    description: Manage your Edge Resources
  - name: Diagnostics
    description: Diagnostic your microservices
  - name: Tunnel
    description: Manage ssh tunnels
  - name: Agent
    description: Used by your agents to communicate with your controller
  - name: User
    description: Manage your users
  - name: Secrets
    description: Manage your secrets
  - name: Certificates
    description: Manage your certificates
  - name: Services
    description: Manage your services
  - name: VolumeMounts
    description: Manage your volume mounts
  - name: ConfigMap
    description: Manage your config maps
components:
  securitySchemes:
    authToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication (user or agent)
  schemas:
    image:
      type: object
      properties:
        containerImage:
          type: string
        fogTypeId:
          type: integer
          minimum: 1
          maximum: 2
      required:
        - containerImage
        - fogTypeId
    volumeMappings:
      type: object
      properties:
        hostDestination:
          type: string
        containerDestination:
          type: string
        accessMode:
          type: string
        type:
          enum:
            - volume
            - bind
      required:
        - hostDestination
        - containerDestination
        - accessMode
    ports:
      type: object
      properties:
        internal:
          type: integer
        external:
          type: integer
        protocol:
          enum:
            - tcp
            - udp
      required:
        - internal
        - external
    extraHosts:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
      required:
        - name
        - address
    env:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        valueFromSecret:
          type: string
        valueFromConfigMap:
          type: string
      required:
        - key
      oneOf:
        - required:
            - value
        - required:
            - valueFromSecret
        - required:
            - valueFromConfigMap
    straceData:
      type: object
      properties:
        microserviceUuid:
          type: string
        buffer:
          type: string
      required:
        - microserviceUuid
        - buffer
    microserviceStatus:
      type: object
      properties:
        id:
          type: string
        containerId:
          type: string
        status:
          type: string
        startTime:
          type: integer
        operatingDuration:
          type: integer
        cpuUsage:
          type: number
        memoryUsage:
          type: number
        ipAddress:
          type: string
        ipAddressExternal:
          type: string
        execSessionIds:
          type: array
          items:
            type: string
      required:
        - id
    agentProvision:
      type: object
      properties:
        type:
          type: integer
          minimum: 0
          maximum: 2
        key:
          type: string
      required:
        - type
        - key
    agentDeprovision:
      type: object
      properties:
        microserviceUuids:
          type: array
          items:
            type: string
      required:
        - microserviceUuids
    updateAgentConfig:
      type: object
      properties:
        networkInterface:
          type: string
        dockerUrl:
          type: string
        diskLimit:
          type: integer
          minimum: 0
        diskDirectory:
          type: string
        memoryLimit:
          type: integer
          minimum: 0
        cpuLimit:
          type: integer
          minimum: 0
        logLimit:
          type: integer
          minimum: 0
        logDirectory:
          type: string
        logFileCount:
          type: integer
          minimum: 0
        statusFrequency:
          type: integer
          minimum: 0
        changeFrequency:
          type: integer
          minimum: 0
        deviceScanFrequency:
          type: integer
          minimum: 0
        watchdogEnabled:
          type: boolean
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        gpsMode:
          type: string
        gpsDevice:
          type: string
        gpsScanFrequency:
          type: integer
          minimum: 0
        edgeGuardFrequency:
          type: integer
          minimum: 0
        dockerPruningFrequency:
          type: integer
          minimum: 0
        availableDiskThreshold:
          type: integer
          minimum: 0
        logLevel:
          type: string
        timeZone:
          type: string
    updateAgentStatus:
      type: object
      properties:
        daemonStatus:
          type: string
        warningMessage:
          type: string
        daemonOperatingDuration:
          type: integer
          minimum: 0
        daemonLastStart:
          type: integer
          minimum: 0
        memoryUsage:
          type: number
          minimum: 0
        diskUsage:
          type: number
          minimum: 0
        cpuUsage:
          type: number
          minimum: 0
        memoryViolation:
          type: boolean
        diskViolation:
          type: boolean
        cpuViolation:
          type: boolean
        systemAvailableDisk:
          type: integer
        systemAvailableMemory:
          type: integer
        systemTotalCpu:
          type: number
        securityStatus:
          type: string
        securityViolationInfo:
          type: string
        microserviceStatus:
          type: string
        repositoryCount:
          type: integer
          minimum: 0
        repositoryStatus:
          type: string
        systemTime:
          type: integer
          minimum: 0
        lastStatusTime:
          type: integer
          minimum: 0
        ipAddress:
          type: string
        ipAddressExternal:
          type: string
        processedMessages:
          type: integer
          minimum: 0
        microserviceMessageCounts:
          type: string
        messageSpeed:
          type: number
          minimum: 0
        lastCommandTime:
          type: integer
          minimum: 0
        gpsMode:
          type: string
        gpsDevice:
          type: string
        gpsScanFrequency:
          type: integer
          minimum: 0
        edgeGuardFrequency:
          type: integer
          minimum: 0
        tunnelStatus:
          type: string
        version:
          type: string
        isReadyToUpgrade:
          type: boolean
        isReadyToRollback:
          type: boolean
    updateAgentStrace:
      type: object
      properties:
        straceData:
          type: array
          items:
            $ref: '#/components/schemas/straceData'
    updateHardwareInfo:
      type: object
      properties:
        info:
          type: string
      required:
        - info
    updateUsbInfo:
      type: object
      properties:
        info:
          type: string
      required:
        - info
    applicationTemplateVariable:
      type: object
      properties:
        key:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
      required:
        - key
    applicationTemplateCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
        variables:
          type: array
          items:
            $ref: '#/components/schemas/applicationTemplateVariable'
      required:
        - name
    applicationTemplateUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
        applicationJSON:
          $ref: '#/components/schemas/applicationCreate'
        variables:
          type: array
          items:
            $ref: '#/components/schemas/applicationTemplateVariable'
    applicationTemplatePatch:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
    applicationTemplateDeploy:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
        isActivated:
          type: boolean
        isSystem:
          type: boolean
        variables:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
      required:
        - name
    applicationCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        routes:
          type: array
          items:
            $ref: '#/components/schemas/routingCreate'
        microservices:
          type: array
          items:
            $ref: '#/components/schemas/microserviceCreate'
        description:
          type: string
        isActivated:
          type: boolean
        isSystem:
          type: boolean
      required:
        - name
    applicationUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        microservices:
          type: array
          items:
            $ref: '#/components/schemas/microserviceCreate'
        routes:
          type: array
          items:
            $ref: '#/components/schemas/routingCreate'
        description:
          type: string
        isActivated:
          type: boolean
        isSystem:
          type: boolean
    applicationPatch:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
        isActivated:
          type: boolean
        isSystem:
          type: boolean
    type:
      type: object
      properties:
        infoType:
          type: string
        infoFormat:
          type: string
    catalogItemCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        category:
          type: string
        publisher:
          type: string
        diskRequired:
          type: integer
        ramRequired:
          type: integer
        picture:
          type: string
        isPublic:
          type: boolean
        registryId:
          type: integer
        configExample:
          type: string
        images:
          type: array
          minItems: 1
          maxItems: 2
          items:
            $ref: '#/components/schemas/image'
        inputType:
          $ref: '#/components/schemas/type'
        outputType:
          $ref: '#/components/schemas/type'
      required:
        - name
        - registryId
        - images
    catalogItemUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        category:
          type: string
        publisher:
          type: string
        diskRequired:
          type: integer
        ramRequired:
          type: integer
        picture:
          type: string
        isPublic:
          type: boolean
        registryId:
          type: integer
        configExample:
          type: string
        images:
          type: array
          maxItems: 2
          items:
            $ref: '#/components/schemas/image'
        inputType:
          $ref: '#/components/schemas/type'
        outputType:
          $ref: '#/components/schemas/type'
    caCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        subject:
          type: string
          minLength: 1
        expiration:
          type: integer
          minimum: 0
        type:
          type: string
          enum:
            - k8s-secret
            - direct
            - self-signed
        secretName:
          type: string
      required:
        - type
        - name
      allOf:
        - {}
        - {}
    certificateCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        subject:
          type: string
          minLength: 1
        hosts:
          type: string
          minLength: 1
        expiration:
          type: integer
          minimum: 0
        ca:
          type: object
          properties:
            type:
              type: string
              enum:
                - k8s-secret
                - direct
                - self-signed
            secretName:
              type: string
          required:
            - type
      required:
        - name
        - subject
        - hosts
    caResponse:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        type:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - subject
        - type
        - created_at
        - updated_at
    certificateResponse:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string
        hosts:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - name
        - subject
        - hosts
        - created_at
        - updated_at
    caListResponse:
      type: object
      properties:
        cas:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              subject:
                type: string
              type:
                type: string
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
            required:
              - name
              - subject
              - type
              - created_at
              - updated_at
      required:
        - cas
    certificateListResponse:
      type: object
      properties:
        certificates:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              subject:
                type: string
              hosts:
                type: string
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
            required:
              - name
              - subject
              - hosts
              - created_at
              - updated_at
      required:
        - certificates
    configMapCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        immutable:
          type: boolean
        data:
          type: object
      required:
        - name
        - data
    configMapUpdate:
      type: object
      properties:
        immutable:
          type: boolean
        data:
          type: object
      required:
        - data
    configMapResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        immutable:
          type: boolean
        data:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - data
        - created_at
        - updated_at
    configMapListResponse:
      type: object
      properties:
        configMaps:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              immutable:
                type: boolean
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
            required:
              - id
              - name
              - created_at
              - updated_at
      required:
        - configMaps
    configUpdate:
      type: object
      properties:
        port:
          type: integer
          minimum: 0
          maximum: 65535
        sslCert:
          type: string
        sslKey:
          type: string
        intermediateCert:
          type: string
        logDir:
          type: string
        logSize:
          type: integer
    configElement:
      type: object
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
      required:
        - key
        - value
    profile:
      type: object
      properties: {}
    straceStateUpdate:
      type: object
      properties:
        enable:
          type: boolean
      required:
        - enable
    straceGetData:
      type: object
      properties:
        format:
          enum:
            - string
            - file
      required:
        - format
    stracePostToFtp:
      type: object
      properties:
        ftpHost:
          type: string
        ftpPort:
          type: integer
          minimum: 0
        ftpUser:
          type: string
        ftpPass:
          type: string
        ftpDestDir:
          type: string
      required:
        - ftpHost
        - ftpPort
        - ftpUser
        - ftpPass
        - ftpDestDir
    edgeResourceDisplay:
      type: object
      properties:
        name:
          type: string
        color:
          type: string
          pattern: ^(#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{8}))|(rgb(s*(?:(d{1,3})s*,?){3}))|(rgba(s*(?:(d{1,3})s*,?){4}))|$
        icon:
          type: string
    edgeResourceHTTPEndpoint:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        description:
          type: string
        method:
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
            - HEAD
            - OPTIONS
        url:
          type: string
        requestType:
          type: string
        responseType:
          type: string
        requestPayloadExample:
          type: string
        responsePayloadExample:
          type: string
    edgeResource:
      type: object
      properties:
        display:
          $ref: '#/components/schemas/edgeResourceDisplay'
        name:
          type: string
          minLength: 1
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        version:
          type: string
          minLength: 1
          pattern: ^v?(0|[1-9]d*).(0|[1-9]d*).(0|[1-9]d*)(?:-((?:0|[1-9]d*|d*[a-zA-Z-][0-9a-zA-Z-]*)(?:.(?:0|[1-9]d*|d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:[+]([0-9a-zA-Z-]+(?:.[0-9a-zA-Z-]+)*))?$
        description:
          type: string
        orchestrationTags:
          type: array
          items:
            type: string
        interfaceProtocol:
          enum:
            - http
            - https
            - ws
            - wss
      oneOf:
        - properties:
            interfaceProtocol:
              enum:
                - http
                - https
                - ws
                - wss
            interface:
              type: object
              properties:
                endpoints:
                  type: array
                  items:
                    $ref: /edgeResourceHTTPEndpoint
    edgeResourceCreate:
      type: object
      allOf:
        - $ref: '#/components/schemas/edgeResource'
      required:
        - name
        - version
    edgeResourceUpdate:
      type: object
      allOf:
        - $ref: '#/components/schemas/edgeResource'
    filter:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        condition:
          enum:
            - has
            - equals
      required:
        - key
        - value
        - condition
    iofogTag:
      type: string
    iofogCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        location:
          type: string
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        description:
          type: string
        networkInterface:
          type: string
        dockerUrl:
          type: string
        containerEngine:
          type: string
          enum:
            - docker
            - podman
        deploymentType:
          type: string
          enum:
            - native
            - container
        diskLimit:
          type: integer
          minimum: 0
        diskDirectory:
          type: string
        memoryLimit:
          type: integer
          minimum: 0
        cpuLimit:
          type: integer
          minimum: 0
        logLimit:
          type: integer
          minimum: 0
        logDirectory:
          type: string
        logFileCount:
          type: integer
          minimum: 0
        statusFrequency:
          type: integer
          minimum: 0
        changeFrequency:
          type: integer
          minimum: 0
        deviceScanFrequency:
          type: integer
          minimum: 0
        bluetoothEnabled:
          type: boolean
        watchdogEnabled:
          type: boolean
        abstractedHardwareEnabled:
          type: boolean
        fogType:
          type: integer
          minimum: 0
          maximum: 2
        dockerPruningFrequency:
          type: integer
          minimum: 0
        availableDiskThreshold:
          type: integer
          minimum: 0
        logLevel:
          type: string
        isSystem:
          type: boolean
        routerMode:
          enum:
            - none
            - edge
            - interior
          default: edge
        messagingPort:
          type: integer
          minimum: 1
          maximum: 65535
        interRouterPort:
          type: integer
          minimum: 1
          maximum: 65535
        edgeRouterPort:
          type: integer
          minimum: 1
          maximum: 65535
        host:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/iofogTag'
        upstreamRouters:
          type: array
          items:
            type: string
            minLength: 1
        networkRouter:
          type: string
        timeZone:
          type: string
      anyOf:
        - properties:
            routerMode: {}
          required:
            - interRouterPort
            - edgeRouterPort
            - host
        - properties:
            routerMode: {}
          required:
            - host
        - properties:
            routerMode: {}
      required:
        - name
        - fogType
    iofogUpdate:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
          minLength: 1
        location:
          type: string
        latitude:
          type: number
          minimum: -90
          maximum: 90
        longitude:
          type: number
          minimum: -180
          maximum: 180
        description:
          type: string
        networkInterface:
          type: string
        dockerUrl:
          type: string
        containerEngine:
          type: string
          enum:
            - docker
            - podman
        deploymentType:
          type: string
          enum:
            - native
            - container
        diskLimit:
          type: integer
          minimum: 0
        diskDirectory:
          type: string
        memoryLimit:
          type: integer
          minimum: 0
        cpuLimit:
          type: integer
          minimum: 0
        logLimit:
          type: integer
          minimum: 0
        logDirectory:
          type: string
        logFileCount:
          type: integer
          minimum: 0
        statusFrequency:
          type: integer
          minimum: 0
        changeFrequency:
          type: integer
          minimum: 0
        deviceScanFrequency:
          type: integer
          minimum: 0
        bluetoothEnabled:
          type: boolean
        watchdogEnabled:
          type: boolean
        abstractedHardwareEnabled:
          type: boolean
        fogType:
          type: integer
          minimum: 0
          maximum: 2
        dockerPruningFrequency:
          type: integer
          minimum: 0
        availableDiskThreshold:
          type: integer
          minimum: 0
        logLevel:
          type: string
        isSystem:
          type: boolean
        routerMode:
          enum:
            - none
            - edge
            - interior
        messagingPort:
          type: integer
          minimum: 1
          maximum: 65535
        interRouterPort:
          type: integer
          minimum: 1
          maximum: 65535
        edgeRouterPort:
          type: integer
          minimum: 1
          maximum: 65535
        host:
          type: string
        upstreamRouters:
          type: array
          items:
            type: string
            minLength: 1
        tags:
          type: array
          items:
            $ref: '#/components/schemas/iofogTag'
        networkRouter:
          type: string
          minLength: 1
        timeZone:
          type: string
      anyOf:
        - properties:
            routerMode: {}
          required:
            - interRouterPort
            - edgeRouterPort
            - host
        - properties:
            routerMode: {}
        - properties:
            routerMode: {}
      required:
        - uuid
    iofogDelete:
      type: object
      properties:
        uuid:
          type: string
      required:
        - uuid
    iofogGet:
      type: object
      properties:
        uuid:
          type: string
        name:
          type: string
      oneOf:
        - required:
            - uuid
        - required:
            - name
    iofogGenerateProvision:
      type: object
      properties:
        uuid:
          type: string
      required:
        - uuid
    iofogSetVersionCommand:
      type: object
      properties:
        uuid:
          type: string
        versionCommand:
          enum:
            - upgrade
            - rollback
      required:
        - uuid
        - versionCommand
    iofogReboot:
      type: object
      properties:
        uuid:
          type: string
      required:
        - uuid
    iofogFilters:
      type: array
      items:
        $ref: '#/components/schemas/filter'
    halGet:
      type: object
      properties:
        uuid:
          type: string
      required:
        - uuid
    iofogPrune:
      type: object
      properties:
        uuid:
          type: string
      required:
        - uuid
    defaultRouterCreate:
      type: object
      properties:
        messagingPort:
          type: integer
          minimum: 1
          maximum: 65535
        interRouterPort:
          type: integer
          minimum: 1
          maximum: 65535
        edgeRouterPort:
          type: integer
          minimum: 1
          maximum: 65535
        requireSsl:
          type: string
        sslProfile:
          type: string
        saslMechanisms:
          type: string
        authenticatePeer:
          type: string
        caCert:
          type: string
        tlsCert:
          type: string
        tlsKey:
          type: string
        host:
          type: string
      required:
        - host
    microserviceCreate:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        config:
          type: string
        annotations:
          type: string
        catalogItemId:
          type: integer
          minimum: 4
        images:
          type: array
          maxItems: 2
          items:
            $ref: '#/components/schemas/image'
        registryId:
          type: integer
        application:
          anyOf:
            - type: string
            - type: number
        iofogUuid:
          type: string
        agentName:
          type: string
        rootHostAccess:
          type: boolean
        schedule:
          type: integer
          minimum: 0
          maximum: 100
        logSize:
          type: integer
        imageSnapshot:
          type: string
        volumeMappings:
          type: array
          items:
            $ref: '#/components/schemas/volumeMappings'
        ports:
          type: array
          items:
            $ref: '#/components/schemas/ports'
        extraHosts:
          type: array
          items:
            $ref: '#/components/schemas/extraHosts'
        routes:
          type: array
          items:
            type: string
        env:
          type: array
          items:
            $ref: '#/components/schemas/env'
        cmd:
          type: array
          items:
            type: string
        cdiDevices:
          type: array
          items:
            type: string
        capAdd:
          type: array
          items:
            type: string
        capDrop:
          type: array
          items:
            type: string
        runAsUser:
          type: string
        platform:
          type: string
        runtime:
          type: string
        pubTags:
          type: array
          items:
            type: string
        subTags:
          type: array
          items:
            type: string
      required:
        - name
    microserviceUpdate:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
        config:
          type: string
        annotations:
          type: string
        rebuild:
          type: boolean
        iofogUuid:
          type: string
        agentName:
          type: string
        rootHostAccess:
          type: boolean
        logSize:
          type: integer
          minimum: 0
        schedule:
          type: integer
          minimum: 0
          maximum: 100
        volumeMappings:
          type: array
          items:
            $ref: '#/components/schemas/volumeMappings'
        images:
          type: array
          maxItems: 2
          minItems: 1
          items:
            $ref: '#/components/schemas/image'
        ports:
          type: array
          items:
            $ref: '#/components/schemas/ports'
        extraHosts:
          type: array
          items:
            $ref: '#/components/schemas/extraHosts'
        env:
          type: array
          items:
            $ref: '#/components/schemas/env'
        cmd:
          type: array
          items:
            type: string
        cdiDevices:
          type: array
          items:
            type: string
        capAdd:
          type: array
          items:
            type: string
        capDrop:
          type: array
          items:
            type: string
        runAsUser:
          type: string
        platform:
          type: string
        runtime:
          type: string
        pubTags:
          type: array
          items:
            type: string
        subTags:
          type: array
          items:
            type: string
    portsCreate:
      type: object
      properties:
        internal:
          type: integer
        external:
          type: integer
        protocol:
          enum:
            - tcp
            - udp
      required:
        - internal
        - external
    microserviceDelete:
      type: object
      properties:
        withCleanup:
          type: boolean
        additionalProperties:
          type: object
          additionalProperties: true
    registryCreate:
      type: object
      properties:
        url:
          type: string
          minLength: 1
        isPublic:
          type: boolean
        username:
          type: string
          minLength: 1
        password:
          type: string
        email:
          type: string
          pattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
        requiresCert:
          type: boolean
        certificate:
          type: string
      required:
        - url
        - isPublic
        - username
        - password
        - email
    registryDelete:
      type: object
      properties:
        id:
          type: integer
      required:
        - id
    registryUpdate:
      type: object
      properties:
        url:
          type: string
          minLength: 1
        isPublic:
          type: boolean
        username:
          type: string
          minLength: 1
        password:
          type: string
        email:
          type: string
          pattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
        requiresCert:
          type: boolean
        certificate:
          type: string
    routingCreate:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
      oneOf:
        - properties:
            from:
              type: string
              pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
            to:
              type: string
              pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
            application:
              type: string
              pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          required:
            - name
            - from
            - to
        - properties:
            sourceMicroserviceUuid:
              type: string
            destMicroserviceUuid:
              type: string
          required:
            - name
            - sourceMicroserviceUuid
            - destMicroserviceUuid
    routingUpdate:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
      oneOf:
        - properties:
            from:
              type: string
              pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
            to:
              type: string
              pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
            application:
              type: string
              pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
          required:
            - from
            - to
            - application
        - properties:
            sourceMicroserviceUuid:
              type: string
            destMicroserviceUuid:
              type: string
          required:
            - sourceMicroserviceUuid
            - destMicroserviceUuid
    secretCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 255
        type:
          type: string
          enum:
            - opaque
            - tls
        data:
          type: object
      required:
        - name
        - type
        - data
    secretUpdate:
      type: object
      properties:
        data:
          type: object
      required:
        - data
    secretResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
          enum:
            - opaque
            - tls
        data:
          type: object
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - type
        - data
        - created_at
        - updated_at
    secretListResponse:
      type: object
      properties:
        secrets:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              name:
                type: string
              type:
                type: string
                enum:
                  - opaque
                  - tls
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
            required:
              - id
              - name
              - type
              - created_at
              - updated_at
      required:
        - secrets
    serviceTag:
      type: string
    serviceCreate:
      type: object
      required:
        - name
        - type
        - resource
        - targetPort
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$
        type:
          type: string
          enum:
            - microservice
            - k8s
            - agent
            - external
        resource:
          type: string
          required:
            - cpu
            - memory
        targetPort:
          type: integer
        defaultBridge:
          type: string
        servicePort:
          type: integer
        k8sType:
          type: string
          enum:
            - LoadBalancer
            - ClusterIP
            - NodePort
        tags:
          type: array
          items:
            $ref: '#/components/schemas/serviceTag'
    serviceUpdate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$
        type:
          type: string
          enum:
            - microservice
            - k8s
            - agent
            - external
        resource:
          type: string
        targetPort:
          type: integer
        defaultBridge:
          type: string
        servicePort:
          type: integer
        k8sType:
          type: string
          enum:
            - LoadBalancer
            - ClusterIP
            - NodePort
        tags:
          type: array
          items:
            $ref: '#/components/schemas/serviceTag'
    tunnelCreate:
      type: object
      properties:
        iofogUuid:
          type: string
        username:
          type: string
          minLength: 1
        password:
          type: string
        rsakey:
          type: string
        lport:
          type: integer
          minimum: 0
          maximum: 65535
        rport:
          type: integer
          minimum: 0
          maximum: 65535
      required:
        - iofogUuid
        - username
        - password
        - lport
        - rport
    login:
      type: object
      properties:
        email:
          type: string
          pattern: ^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$
        password:
          type: string
        totp:
          type: string
      required:
        - email
        - password
    refresh:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken
    volumeMountCreate:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$
        secretName:
          type: string
        configMapName:
          type: string
      required:
        - name
      oneOf:
        - required:
            - secretName
        - required:
            - configMapName
    volumeMountUpdate:
      type: object
      properties:
        name:
          type: string
          pattern: ^[a-z0-9]([a-z0-9-]*[a-z0-9])?$
        secretName:
          type: string
        configMapName:
          type: string
      oneOf:
        - required:
            - secretName
        - required:
            - configMapName
    volumeMountLink:
      type: object
      properties:
        fogUuids:
          type: array
          items:
            type: string
          minItems: 1
      required:
        - fogUuids
    volumeMountUnlink:
      type: object
      properties:
        fogUuids:
          type: array
          items:
            type: string
          minItems: 1
      required:
        - fogUuids
security:
  - authToken: []
paths:
  /agent/provision:
    post:
      tags:
        - Agent
      summary: POST /api/v3/agent/provision
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/agentProvision'
  /agent/deprovision:
    post:
      tags:
        - Agent
      summary: POST /api/v3/agent/deprovision
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/agentProvision'
  /agent/config:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/config
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Agent
      summary: PATCH /api/v3/agent/config
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /agent/config/changes:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/config/changes
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Agent
      summary: PATCH /api/v3/agent/config/changes
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /agent/status:
    put:
      tags:
        - Agent
      summary: PUT /api/v3/agent/status
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAgentConfig'
  /agent/edgeResources:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/edgeResources
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/volumeMounts:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/volumeMounts
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/microservices:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/microservices
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/microservices/{microserviceUuid}:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/microservices/:microserviceUuid
      security:
        - authToken: []
      parameters:
        - name: microserviceUuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/registries:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/registries
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/tunnel:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/tunnel
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/strace:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/strace
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Agent
      summary: PUT /api/v3/agent/strace
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAgentConfig'
  /agent/version:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/version
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/hal/hw:
    put:
      tags:
        - Agent
      summary: PUT /api/v3/agent/hal/hw
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAgentConfig'
  /agent/hal/usb:
    put:
      tags:
        - Agent
      summary: PUT /api/v3/agent/hal/usb
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAgentConfig'
  /agent/delete-node:
    delete:
      tags:
        - Agent
      summary: DELETE /api/v3/agent/delete-node
      security:
        - authToken: []
      parameters: []
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /agent/image-snapshot:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/image-snapshot
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Agent
      summary: PUT /api/v3/agent/image-snapshot
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateAgentConfig'
  /agent/cert:
    get:
      tags:
        - Agent
      summary: GET /api/v3/agent/cert
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /application:
    get:
      tags:
        - Application
      summary: GET /api/v3/application
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        version:
                          type: string
                        microservices:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              config:
                                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Application
      summary: POST /api/v3/application
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationCreate'
  /application/system:
    get:
      tags:
        - Application
      summary: GET /api/v3/application/system
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        version:
                          type: string
                        microservices:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              config:
                                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /application/yaml:
    post:
      tags:
        - Application
      summary: POST /api/v3/application/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /application/{name}:
    get:
      tags:
        - Application
      summary: GET /api/v3/application/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        version:
                          type: string
                        microservices:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              config:
                                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Application
      summary: PATCH /api/v3/application/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationPatch'
    put:
      tags:
        - Application
      summary: PUT /api/v3/application/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationUpdate'
    delete:
      tags:
        - Application
      summary: DELETE /api/v3/application/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /application/system/{name}:
    get:
      tags:
        - Application
      summary: GET /api/v3/application/system/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        version:
                          type: string
                        microservices:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              config:
                                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Application
      summary: DELETE /api/v3/application/system/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /application/yaml/{name}:
    put:
      tags:
        - Application
      summary: PUT /api/v3/application/yaml/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationUpdate'
  /applicationTemplates:
    get:
      tags:
        - Application
      summary: GET /api/v3/applicationTemplates
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        version:
                          type: string
                        microservices:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              config:
                                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applicationTemplate:
    post:
      tags:
        - Application
      summary: POST /api/v3/applicationTemplate
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationCreate'
  /applicationTemplate/yaml:
    post:
      tags:
        - Application
      summary: POST /api/v3/applicationTemplate/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /applicationTemplate/{name}:
    get:
      tags:
        - Application
      summary: GET /api/v3/applicationTemplate/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  applications:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        version:
                          type: string
                        microservices:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              config:
                                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Application
      summary: PATCH /api/v3/applicationTemplate/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationPatch'
    put:
      tags:
        - Application
      summary: PUT /api/v3/applicationTemplate/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationUpdate'
    delete:
      tags:
        - Application
      summary: DELETE /api/v3/applicationTemplate/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /applicationTemplate/yaml/{name}:
    put:
      tags:
        - Application
      summary: PUT /api/v3/applicationTemplate/yaml/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/applicationUpdate'
  /capabilities/edgeResources:
    head:
      tags:
        - Controller
      summary: HEAD /api/v3/capabilities/edgeResources
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /capabilities/applicationTemplates:
    head:
      tags:
        - Controller
      summary: HEAD /api/v3/capabilities/applicationTemplates
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /catalog/microservices:
    get:
      tags:
        - Catalog
      summary: GET /api/v3/catalog/microservices
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Catalog
      summary: POST /api/v3/catalog/microservices
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
  /catalog/microservices/{id}:
    get:
      tags:
        - Catalog
      summary: GET /api/v3/catalog/microservices/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Catalog
      summary: PATCH /api/v3/catalog/microservices/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - Catalog
      summary: DELETE /api/v3/catalog/microservices/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /certificates/ca:
    post:
      tags:
        - Certificates
      summary: POST /api/v3/certificates/ca
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/certificateCreate'
    get:
      tags:
        - Certificates
      summary: GET /api/v3/certificates/ca
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /certificates/ca/{name}:
    get:
      tags:
        - Certificates
      summary: GET /api/v3/certificates/ca/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Certificates
      summary: DELETE /api/v3/certificates/ca/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /certificates:
    post:
      tags:
        - Certificates
      summary: POST /api/v3/certificates
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/certificateCreate'
    get:
      tags:
        - Certificates
      summary: GET /api/v3/certificates
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /certificates/expiring:
    get:
      tags:
        - Certificates
      summary: GET /api/v3/certificates/expiring
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /certificates/{name}:
    get:
      tags:
        - Certificates
      summary: GET /api/v3/certificates/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Certificates
      summary: DELETE /api/v3/certificates/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /certificates/{name}/renew:
    post:
      tags:
        - Certificates
      summary: POST /api/v3/certificates/:name/renew
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/certificateCreate'
  /certificates/yaml:
    post:
      tags:
        - Certificates
      summary: POST /api/v3/certificates/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /config:
    get:
      tags:
        - ConfigMap
      summary: GET /api/v3/config
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - ConfigMap
      summary: PUT /api/v3/config
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configUpdate'
  /config/{key}:
    get:
      tags:
        - ConfigMap
      summary: GET /api/v3/config/:key
      security:
        - authToken: []
      parameters:
        - name: key
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /configmaps:
    post:
      tags:
        - ConfigMap
      summary: POST /api/v3/configmaps
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      tags:
        - ConfigMap
      summary: GET /api/v3/configmaps
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /configmaps/yaml:
    post:
      tags:
        - ConfigMap
      summary: POST /api/v3/configmaps/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /configmaps/{name}:
    patch:
      tags:
        - ConfigMap
      summary: PATCH /api/v3/configmaps/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      tags:
        - ConfigMap
      summary: GET /api/v3/configmaps/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - ConfigMap
      summary: DELETE /api/v3/configmaps/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /configmaps/yaml/{name}:
    patch:
      tags:
        - ConfigMap
      summary: PATCH /api/v3/configmaps/yaml/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /status:
    get:
      tags:
        - Controller
      summary: GET /api/v3/status
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /fog-types/:
    get:
      tags:
        - Controller
      summary: GET /api/v3/fog-types/
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/{uuid}/image-snapshot:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/:uuid/image-snapshot
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/:uuid/image-snapshot
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/{uuid}/strace:
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/:uuid/strace
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/:uuid/strace
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Microservices
      summary: PUT /api/v3/microservices/:uuid/strace
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceUpdate'
  /edgeResources:
    get:
      tags:
        - Edge Resource
      summary: GET /api/v3/edgeResources
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /edgeResource/{name}/{version}:
    get:
      tags:
        - Edge Resource
      summary: GET /api/v3/edgeResource/:name/:version
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Edge Resource
      summary: PUT /api/v3/edgeResource/:name/:version
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/edgeResourceUpdate'
    delete:
      tags:
        - Edge Resource
      summary: DELETE /api/v3/edgeResource/:name/:version
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /edgeResource/{name}:
    get:
      tags:
        - Edge Resource
      summary: GET /api/v3/edgeResource/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /edgeResource:
    post:
      tags:
        - Edge Resource
      summary: POST /api/v3/edgeResource
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/edgeResourceCreate'
  /edgeResource/{name}/{version}/link:
    post:
      tags:
        - Edge Resource
      summary: POST /api/v3/edgeResource/:name/:version/link
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/edgeResourceCreate'
    delete:
      tags:
        - Edge Resource
      summary: DELETE /api/v3/edgeResource/:name/:version/link
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /flow:
    get:
      tags:
        - Application
      summary: GET /api/v3/flow
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Application
      summary: POST /api/v3/flow
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /flow/{id}:
    get:
      tags:
        - Application
      summary: GET /api/v3/flow/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Application
      summary: PATCH /api/v3/flow/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - Application
      summary: DELETE /api/v3/flow/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /iofog-list:
    get:
      tags:
        - ioFog
      summary: GET /api/v3/iofog-list
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /iofog:
    post:
      tags:
        - ioFog
      summary: POST /api/v3/iofog
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iofogCreate'
  /iofog/{uuid}:
    patch:
      tags:
        - ioFog
      summary: PATCH /api/v3/iofog/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - ioFog
      summary: DELETE /api/v3/iofog/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    get:
      tags:
        - ioFog
      summary: GET /api/v3/iofog/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /iofog/{uuid}/provisioning-key:
    get:
      tags:
        - ioFog
      summary: GET /api/v3/iofog/:uuid/provisioning-key
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /iofog/{uuid}/version/{versionCommand}:
    post:
      tags:
        - ioFog
      summary: POST /api/v3/iofog/:uuid/version/:versionCommand
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: versionCommand
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iofogCreate'
  /iofog/{uuid}/reboot:
    post:
      tags:
        - ioFog
      summary: POST /api/v3/iofog/:uuid/reboot
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iofogCreate'
  /iofog/{uuid}/hal/hw:
    get:
      tags:
        - ioFog
      summary: GET /api/v3/iofog/:uuid/hal/hw
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /iofog/{uuid}/hal/usb:
    get:
      tags:
        - ioFog
      summary: GET /api/v3/iofog/:uuid/hal/usb
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /iofog/{uuid}/prune:
    post:
      tags:
        - ioFog
      summary: POST /api/v3/iofog/:uuid/prune
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iofogCreate'
  /microservices/:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/system:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/system
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
  /microservices/yaml:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /microservices/{uuid}:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/system/{uuid}:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/system/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/system/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /microservices/pub/{tag}:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/pub/:tag
      security:
        - authToken: []
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/sub/{tag}:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/sub/:tag
      security:
        - authToken: []
      parameters:
        - name: tag
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/{uuid}/rebuild:
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/:uuid/rebuild
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /microservices/system/{uuid}/rebuild:
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/system/:uuid/rebuild
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /microservices/yaml/{uuid}:
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/yaml/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /microservices/system/yaml/{uuid}:
    patch:
      tags:
        - Microservices
      summary: PATCH /api/v3/microservices/system/yaml/:uuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /microservices/{uuid}/routes/{receiverUuid}:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/:uuid/routes/:receiverUuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: receiverUuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/:uuid/routes/:receiverUuid
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: receiverUuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/{uuid}/port-mapping:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/:uuid/port-mapping
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/:uuid/port-mapping
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/system/{uuid}/port-mapping:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/system/:uuid/port-mapping
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
  /microservices/{uuid}/port-mapping/{internalPort}:
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/:uuid/port-mapping/:internalPort
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: internalPort
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/system/{uuid}/port-mapping/{internalPort}:
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/system/:uuid/port-mapping/:internalPort
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: internalPort
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/{uuid}/volume-mapping:
    get:
      tags:
        - Microservices
      summary: GET /api/v3/microservices/:uuid/volume-mapping
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
                properties:
                  microservices:
                    type: array
                    items:
                      type: object
                      properties:
                        uuid:
                          type: string
                        name:
                          type: string
                        config:
                          type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/:uuid/volume-mapping
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
  /microservices/system/{uuid}/volume-mapping:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/system/:uuid/volume-mapping
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
  /microservices/{uuid}/volume-mapping/{id}:
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/:uuid/volume-mapping/:id
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/system/{uuid}/volume-mapping/{id}:
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/system/:uuid/volume-mapping/:id
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/{uuid}/exec:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/:uuid/exec
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/:uuid/exec
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /microservices/system/{uuid}/exec:
    post:
      tags:
        - Microservices
      summary: POST /api/v3/microservices/system/:uuid/exec
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microserviceCreate'
    delete:
      tags:
        - Microservices
      summary: DELETE /api/v3/microservices/system/:uuid/exec
      security:
        - authToken: []
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /registries:
    post:
      tags:
        - Registries
      summary: POST /api/v3/registries
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      tags:
        - Registries
      summary: GET /api/v3/registries
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /registries/{id}:
    delete:
      tags:
        - Registries
      summary: DELETE /api/v3/registries/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Registries
      summary: PATCH /api/v3/registries/:id
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /router:
    get:
      tags:
        - Router
      summary: GET /api/v3/router
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    put:
      tags:
        - Router
      summary: PUT /api/v3/router
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /routes:
    get:
      tags:
        - Routing
      summary: GET /api/v3/routes
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Routing
      summary: POST /api/v3/routes
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /routes/{appName}/{name}:
    get:
      tags:
        - Routing
      summary: GET /api/v3/routes/:appName/:name
      security:
        - authToken: []
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Routing
      summary: PATCH /api/v3/routes/:appName/:name
      security:
        - authToken: []
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - Routing
      summary: DELETE /api/v3/routes/:appName/:name
      security:
        - authToken: []
      parameters:
        - name: appName
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /secrets:
    post:
      tags:
        - Secrets
      summary: POST /api/v3/secrets
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/secretCreate'
    get:
      tags:
        - Secrets
      summary: GET /api/v3/secrets
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /secrets/yaml:
    post:
      tags:
        - Secrets
      summary: POST /api/v3/secrets/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /secrets/{name}:
    patch:
      tags:
        - Secrets
      summary: PATCH /api/v3/secrets/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      tags:
        - Secrets
      summary: GET /api/v3/secrets/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - Secrets
      summary: DELETE /api/v3/secrets/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /secrets/yaml/{name}:
    patch:
      tags:
        - Secrets
      summary: PATCH /api/v3/secrets/yaml/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /services:
    get:
      tags:
        - Services
      summary: GET /api/v3/services
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - Services
      summary: POST /api/v3/services
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceCreate'
  /services/{name}:
    get:
      tags:
        - Services
      summary: GET /api/v3/services/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - Services
      summary: PATCH /api/v3/services/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - Services
      summary: DELETE /api/v3/services/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /services/yaml:
    post:
      tags:
        - Services
      summary: POST /api/v3/services/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /services/yaml/{name}:
    patch:
      tags:
        - Services
      summary: PATCH /api/v3/services/yaml/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /iofog/{id}/tunnel:
    patch:
      tags:
        - ioFog
      summary: PATCH /api/v3/iofog/:id/tunnel
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    get:
      tags:
        - ioFog
      summary: GET /api/v3/iofog/:id/tunnel
      security:
        - authToken: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /user/login:
    post:
      tags:
        - User
      summary: POST /api/v3/user/login
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
  /user/refresh:
    post:
      tags:
        - User
      summary: POST /api/v3/user/refresh
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
  /user/profile:
    get:
      tags:
        - User
      summary: GET /api/v3/user/profile
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /user/logout:
    post:
      tags:
        - User
      summary: POST /api/v3/user/logout
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
  /volumeMounts:
    get:
      tags:
        - VolumeMounts
      summary: GET /api/v3/volumeMounts
      security:
        - authToken: []
      parameters: []
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    post:
      tags:
        - VolumeMounts
      summary: POST /api/v3/volumeMounts
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/volumeMountCreate'
  /volumeMounts/{name}:
    get:
      tags:
        - VolumeMounts
      summary: GET /api/v3/volumeMounts/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
    patch:
      tags:
        - VolumeMounts
      summary: PATCH /api/v3/volumeMounts/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
    delete:
      tags:
        - VolumeMounts
      summary: DELETE /api/v3/volumeMounts/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
  /volumeMounts/yaml:
    post:
      tags:
        - VolumeMounts
      summary: POST /api/v3/volumeMounts/yaml
      security:
        - authToken: []
      parameters: []
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                application:
                  type: string
                  format: binary
  /volumeMounts/yaml/{name}:
    patch:
      tags:
        - VolumeMounts
      summary: PATCH /api/v3/volumeMounts/yaml/:name
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
  /volumeMounts/{name}/link:
    post:
      tags:
        - VolumeMounts
      summary: POST /api/v3/volumeMounts/:name/link
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Bad Request
        '401':
          description: Not Authorized
        '409':
          description: Duplicate Name
        '500':
          description: Internal Server Error
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/volumeMountCreate'
    delete:
      tags:
        - VolumeMounts
      summary: DELETE /api/v3/volumeMounts/:name/link
      security:
        - authToken: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
          headers:
            X-Timestamp:
              description: FogController server timestamp
              schema:
                type: number
        '401':
          description: Not Authorized
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
