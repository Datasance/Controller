trigger:
  tags:
    include:
      - v.*
  branches:
    include:
      - develop
      - release
  paths:
    exclude:
      - README.md

pr:
  - master

variables:
  repository: 'focal-freedom-236620/controller'
  primaryTag: $(Build.SourceBranchName)

jobs:
  - job: Platform
    dependsOn: Controller
    pool: server
    variables:
      commit: $[dependencies.Controller.outputs['setvarStep.commit']]

    steps:

      - task: InvokeRESTAPI@1
        displayName: 'trigger platform job'
        inputs:
          connectionType: 'connectedServiceName'
          serviceConnection: 'Pipelines'
          method: 'POST'
          urlSuffix: '/edgeworx/_apis/build/builds?api-version=5.0'
          body: "{\"Parameters\":\"{\\\"images.controller\\\": \\\"gcr.io/$(repository):$(commit)\\\"}\", \"Definition\":{\"id\":\"5\"}}"
          waitForCompletion: 'false'

  - job: Controller
    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '8.x'
        displayName: 'Install Node.js'

      - script: |
          npm install
        displayName: 'npm install and build'

      - script: |
          npm test
        displayName: 'unit tests'

      - script: |
          echo "npm test"
        displayName: 'integration tests'

      - script: |
          git checkout package-lock.json
          git config --global user.email "info@edgeworx.io"
          git config --global user.name "Azure DevOps"
          npm version prerelease --preid=rc-$(Build.BuildNumber)
        displayName: 'npm version'
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/'))

      - script: |
          npm pack
        displayName: 'npm pack'

      - bash: |
          echo 'checking pack file exists..'
          tar=$(ls iofogcontroller-*.tgz)
          echo $tar
          echo "##vso[task.setvariable variable=controller_tar]$tar"

          echo 'setting commit tag'
          commit=$(git rev-parse --short=5 HEAD)
          echo "##vso[task.setvariable variable=commit]$commit"
          echo "##vso[task.setvariable variable=commit;isOutput=true]$commit"

          echo 'setting primary tag'
          echo $(Build.SourceBranch)
          if [[ $(Build.SourceBranchName) == 'develop' ]]; then
            echo "##vso[task.setvariable variable=primaryTag;isOutput=true]dev-latest"
          elif [[ $(Build.SourceBranch) == refs/heads/release* ]]; then
            echo "##vso[task.setvariable variable=primaryTag;isOutput=true]rc-latest"
          #If branch starts with ref/tags, apply latest and version tag
          elif [[ $(Build.SourceBranch) == refs/tags* ]]; then
            echo "##vso[task.setvariable variable=commit]latest"
            echo "##vso[task.setvariable variable=commit;isOutput=true]latest"
          fi
          echo 'commit tag: '$commit
          echo 'primary tag: '$primaryTag
        displayName: 'setting vars'
        name: setvarStep

      - task: Docker@2
        displayName: 'build docker'
        inputs:
          containerRegistry: 'Edgeworx GCP'
          repository: $(repository)
          command: 'build'
          Dockerfile: "Dockerfile.dev"
          arguments: --build-arg FILENAME=$(controller_tar)
          tags: |
            $(commit)
            $(primaryTag)

      - task: Docker@2
        displayName: 'push docker'
        inputs:
          containerRegistry: 'Edgeworx GCP'
          repository: $(repository)
          command: 'push'
          Dockerfile: "Dockerfile.dev"
          tags: |
            $(commit)
            $(primaryTag)

      - script: |
          echo "npm test"
        displayName: 'api tests'

      - task: CopyFiles@2
        inputs:
          SourceFolder: $(System.DefaultWorkingDirectory)
          TargetFolder: $(Build.ArtifactStagingDirectory)
          Contents: |
            *.tgz
          OverWrite: true

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'controller'

      - task: Npm@1
        displayName: 'publish dev npm package'
        inputs:
          command: 'publish'
          publishRegistry: 'useFeed'
          publishFeed: 'dev'

      - task: Npm@1
        displayName: 'publish npm package'
        inputs:
          command: 'publish'
          verbose: true
          publishEndpoint: 'edgeworx npm'
        condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
